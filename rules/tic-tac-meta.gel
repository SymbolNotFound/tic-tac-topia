output {(
  ^title := "Tic-Tac-Topia"
  ^slug := "t3-meta"
  ^summary := "A panoply of Tic-Tac-Toe variants within a Tic-Tac-Toe board"
  ^author := "Kevin Damm"
  ^version := [0,8,0]
)}

consult "tic-tac-cards" ( include * as cards  )
consult "tic-tac-rainbow" ( include * as rainbow )
consult "tic-tac-roshambo" ( include * as roshambo )
consult "tic-tac-shadow" ( include * as shadow )
consult "tic-tac-stones" ( include * as stones )
consult "tic-tac-tandem" ( include * as tandem )
consult "tic-tac-thrice" ( include * as thrice )
consult "tic-tac-throw" ( include * as throw )
consult "tic-tac-tiles" ( include * as tiles )

consult "boards/MNK" (
  include #RectSurface
)
consult "control/turns" (
  include #Alternating
)

role (
  playerX {( ^Marker = "X" )}
  playerO {( ^Marker = "O" )}
)

init control := #Alternating.control {(
  initiative := playerX
  reactive := playerO
)}

enum Marking :: BLANK + playerX.Marker + playerO.Marker + FROZEN
init board := #Rect3x3<Marking> {(
  init _ := BLANK
)}

base subgame(board.Index) = (?history, rules)
init (
  subgame(1, 1) := (new, thrice)
  subgame(1, 2) := (new, stones)
  subgame(1, 3) := (new, cards)

  subgame(2, 1) := (new, tandem)
  subgame(2, 2) := (new, rainbow)
  subgame(2, 3) := (new, shadow)
  
  subgame(3, 1) := (new, tiles)
  subgame(3, 2) := (new, roshambo)
  subgame(3, 3) := (new, throw)
)

input role -> Select(Index) :=> board(Index)

?player -> Select(?row, ?col) :-
  board(?row, ?col) == BLANK
  ==> {(
    let ?history, ?game := subgame(?row, ?col)
    let ?result := play ?game
    board(?row, ?col) := ?result.winner.Marker else FROZEN
    subgame(?row, ?col) := ([?result.history, ?history], ?game)
  )}

when board(?row, ?col) == FROZEN
  ==> board(?row, ?col) := BLANK

terminal :- board.line(_)
terminal :- not board.exists(BLANK)

?player $+ 100 :- board.line(?player.Marking)
?player $+ 50 :- ~board.line(_)
