^title := "Tic-Tac-Tandem"
^slug := "t3-tandem"
^author := "Kevin Damm"
^version := [0,7,0]


consult "boards/MNK" (
  include #RectSurface
)


role playerX, playerO

#Role: {( Marker )}
enum Marker: {{ "X" | "O" }}

init (
  playerX.Marker := "X"
  playerO.Marker := "O"
)


enum Index :: {[ 1..3 ]} * {[ 1..3 ]}
enum BoardIndex :: {{ left | right }}

%% Valid markings on the board include each player's mark and two special marks.
%% The blank marking is the default value, and cells may also be frozen.
enum Marking: {{ *BLANK | Marker | FROZEN }}
base BLANK = "_"
base FROZEN = "~"


init boards := {[
  #RectSurface<Index, Marking> * BoardIndex
]}


%% A player's moves are on both boards at once,
%% and simultaneously with the other player.
input Mark(
  all BoardIndex,
  Index, Index)

%% Players can mark any open cell (if it is BLANK)
?player -> Mark(?bi, ?row, ?col) :-
  boards[?bi][?row, ?col] == BLANK
    ==> boards[?bi][?row, ?col] := ?player.Marker

    %% because play is simultaneous, there is a conflict resolution step.
    \=> playerX.Mark(?bi, ?row, ?col) and playerO.Mark(?bi, ?row, ?col)
      %% When players choose the same position (on either board),
      %% that cell is frozen out for a couple of turns.
      ==> boards[?bi][?row, ?col] := (FROZEN, 2)

%% After two turns of being frozen, the cell reverts to being available.
when boards[?bi][?r, ?c] == (FROZEN, 1)
  ==> boards[?bi][?r, ?c] := BLANK
when boards[?bi][?r, ?c] == (FROZEN, 2)
  ==> boards[?bi][?r, ?c] := (FROZEN, 1)


line(?mark) :- boards[?i].line(?mark)
open :- boards[any BoardIndex].exists(BLANK)

terminal :- line(_)
terminal :- ~open


playerX $+ 100 :- line(x) & ~line(o)
playerO $+ 100 :- ~line(x) & line(o)

playerX $+ 50 and playerO $+ 50
  :- ~line(x) & ~line(o)
