%% Copyright (c) 2025, Symbol Not Found
%% 
%% Redistributions of source code must retain the above copyright notice, this
%% list of conditions and the following disclaimer.
%% 
%% Redistributions in binary form must reproduce the above copyright notice,
%% this list of conditions and the following disclaimer in the documentation
%% and/or other materials provided with the distribution.
%% 
%% Neither the name of the copyright holder nor the names of its contributors
%% may be used to endorse or promote products derived from this software without
%% specific prior written permission.
%% 
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%% POSSIBILITY OF SUCH DAMAGE.
%%
%% github:SymbolNotFound/tic-tac-topia/rules/tic-tac-tandem.gel

^title := "Tic-Tac-Tandem"
^slug := "t3-tandem"
^author := "Kevin Damm"
^version := [0,7,9]

consult "boards/MNK" (
  include #RectSurface
)


role playerX, playerO {(
  Marker
)}

enum Marker := "X" || "O"

init (
  playerX.Marker := "X"
  playerO.Marker := "O"
)


enum Index := {[ 1..3 ]} * {[ 1..3 ]}
enum BoardIndex := left || right

%% Valid markings on the board include each player's mark and two special marks.
%% The blank marking is the default value, and cells may also be frozen.
enum Marking := *BLANK || Marker || FROZEN
const BLANK = "_"
const FROZEN = "~"


init boards := {[
  #RectSurface<Index, Marking> * BoardIndex
]}


%% A player's moves are on both boards at once,
%% and simultaneously with the other player.
input Mark(
  all BoardIndex,
  Index, Index)

%% Players can mark any open cell (if it is BLANK)
?player -> Mark(?bi, ?row, ?col) :-
  boards[?bi][?row, ?col] == BLANK
    ==> boards[?bi][?row, ?col] := ?player.Marker

    %% because play is simultaneous, there is a conflict resolution step.
    \=> playerX.Mark(?bi, ?row, ?col) and playerO.Mark(?bi, ?row, ?col)
      %% When players choose the same position (on either board),
      %% that cell is frozen out for a couple of turns.
      ==> boards[?bi][?row, ?col] := (FROZEN, 2)

%% After two turns of being frozen, the cell reverts to being available.
when boards[?bi][?r, ?c] == (FROZEN, 1)
  ==> boards[?bi][?r, ?c] := BLANK
when boards[?bi][?r, ?c] == (FROZEN, 2)
  ==> boards[?bi][?r, ?c] := (FROZEN, 1)


line(?player) :-
  role(?player) and
  let ?mark := ?player.Marker and
  boards[?i].line(?mark)

open :- boards[any BoardIndex].exists(BLANK)

terminal :- line(_)
terminal :- ~open


playerX $+ 100 :- line(playerX) and ~line(playerO)
playerO $+ 100 :- ~line(playerX) and line(playerO)

playerX $+ 50 and playerO $+ 50 :-
  ~line(playerX) and ~line(playerO)
