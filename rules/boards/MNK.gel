%% Copyright (c) 2025, Symbol Not Found
%% 
%% Redistributions of source code must retain the above copyright notice, this
%% list of conditions and the following disclaimer.
%% 
%% Redistributions in binary form must reproduce the above copyright notice,
%% this list of conditions and the following disclaimer in the documentation
%% and/or other materials provided with the distribution.
%% 
%% Neither the name of the copyright holder nor the names of its contributors
%% may be used to endorse or promote products derived from this software without
%% specific prior written permission.
%% 
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%% POSSIBILITY OF SUCH DAMAGE.
%%
%% github:SymbolNotFound/tic-tac-topia/rules/boards/MNK.gel

^summary := "Common surface structures for <M, N, K> board layouts."
^refer := "https://wikipedia.org/wiki/M,n,k-game"
^author := "Kevin Damm"

consult "itertools" (
  include zip
)


%% A square surface of positions for alignment and territory games.
%% Index is a two-dimensional tuple that defines positions on the surface
%% Marking is the domain of symbols and atoms that may be assigned to a cell.
surface #RectSurface<Index in (range * range), Marking>
    =:= {[ cell(all Index) = (?m in Marking) ]}


%% Commonly used rectangular boards.
surface #Rect3x3<Marking> =:= #RectSurface<{[ 1..3 ]} * {[ 1..3 ]}, Marking>
surface #Rect5x5<Marking> =:= #RectSurface<{[ 1..5 ]} * {[ 1..5 ]}, Marking>

%% Rules inherent to rectangular surfaces, especially line(...) and exists(...).
basis #RectSurface<Index, Marking> {(
  Index is ?row * ?col
  delta is |?row| +- |?col|
  
  line(?mark in Marking) :- row(_, ?mark)
  line(?mark in Marking) :- column(_, ?mark)
  line(?mark in Marking) :- diagonal(_, ?mark)

  exists(?mark in Marking) :- cell(_, _) == ?mark

  %% square boards where length and width are equal
  where |?row| #= |?col| => {(
    
      row(?row, ?mark in Marking) :-
        cell(?row, all _) == ?mark

      column(?col, ?mark in Marking) :-
        cell(all _, ?col) == ?mark

      diagonal(forward, ?mark in Marking) :-
        forall ?index in zip (?row, ?col)
          cell(?index) == ?mark
      diagonal(backward, ?mark in Marking) :-
        forall ?index in zip (?row, reverse ?col)
          cell(?index) == ?mark
  )}

  %% "landscape" aspect ratios.
  where |?row| #< |?col| => {(

      row(?row, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          let start := ?col+?k
          let limit := ?col+?k+|?row|
          cell(?row, all {[ start..limit ]}) == ?mark

      column(?col, ?mark in Marking) :-
        cell(all _, ?col) == ?mark

      diagonal(forward, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          forall ?index in zip (?row, ?col + ?k)
          cell(?index) == ?mark
      diagonal(backward, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          forall ?index in zip (?row, (reverse ?col) + ?k)
            cell(?index) == ?mark
  )}

  %% "portrait" aspect ratios
  where |?row| #> |?col| => {(

      row(?row, ?mark in Marking) :-
        cell(?row, all _) == ?mark

      col(?col, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          let start := ?row+?k
          let limit := ?row+?k+|?col|
          cell(all {[ start..limit ]}, ?col) == ?mark

      diagonal(forward, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          forall ?index in zip (?row + ?k, ?col)
            cell(?index) == ?mark
      diagonal(backward, ?mark in Marking) :-
        forany ?k in {[ 0..delta ]}
          forall ?index in zip (?row + ?k, reverse ?col)
            cell(?index) == ?mark
  )}
)}
